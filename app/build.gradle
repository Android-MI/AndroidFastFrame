apply plugin: 'com.android.application'

android {
    compileSdkVersion Integer.parseInt(System.properties['compileSdkVersion'])
//    buildToolsVersion System.properties['buildToolsVersion']
    defaultConfig {
        applicationId "com.demo.frame"
        minSdkVersion Integer.parseInt(System.properties['minSdkVersion'])
        targetSdkVersion Integer.parseInt(System.properties['targetSdkVersion'])
        versionCode getSelfDefinedVersion('code')
        versionName getSelfDefinedVersion('title')
//        ndk {
//            abiFilters 'arm64-v8a', 'armeabi-v7a'
//        }
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
    }
    dataBinding {
        enabled = true
    }
    repositories {
        flatDir {
            dirs 'libs' //this way we can find the .aar file in libs folder
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    signingConfigs {
        debug {
            storeFile file("fastlib_debug.jks")
            storePassword "androidDebug"
            keyAlias "android"
            keyPassword "androidDebug"
        }
        release {
            storeFile file("fastlib_debug.jks")
            storePassword "androidDebug"
            keyAlias "android"
            keyPassword "androidDebug"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            aaptOptions.cruncherEnabled = false
            aaptOptions.useNewCruncher = false
            buildConfigField 'Boolean', 'AppDebug', AppDebug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            aaptOptions.cruncherEnabled = false
            aaptOptions.useNewCruncher = false
            buildConfigField 'Boolean', 'AppDebug', AppDebug
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            def date = new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08"))

            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.replace("app", "fastframe_${date}_${defaultConfig.versionName}.${defaultConfig.versionCode}")
//                outputFileName = new File(outputFile.parent, fileName)
                //outputFileName = new File("../../../release/", fileName)
                outputFileName = fileName
            }
        }
    }
    configurations.all {
        resolutionStrategy.eachDependency {  details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion '28.0.2'
                }
            }
        }

    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':frame')
    implementation 'com.android.support:multidex:1.0.3'

    api("com.github.bumptech.glide:glide:4.9.0") {
        exclude group: "com.android.support"
    }
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'com.android.support:appcompat-v7:28.0.2'
    implementation 'com.android.support:design:28.0.2'
    implementation 'com.android.support:cardview-v7:28.0.2'
//    implementation 'io.reactivex.rxjava2:rxjava:2.0.8'
//    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
//    implementation 'com.just.agentweb:agentweb:1.2.5'
//    implementation 'de.hdodenhof:circleimageview:2.1.0'
//    implementation 'com.yanzhenjie:recyclerview-swipe:1.1.2'
//    implementation 'com.github.EthanCo:DropDownMenu:1.0.8'
    implementation 'com.github.billy96322:EasyPermission:0.0.5'
//    implementation 'com.github.codbking:PickTime:v1.0.1'
//    implementation 'org.devio.takephoto:takephoto_library:4.1.0'

    implementation "com.github.vondear.RxTool:RxKit:v2.2.7"
    implementation "com.github.vondear.RxTool:RxUI:v2.2.7"
    implementation "com.github.vondear.RxTool:RxFeature:v2.3.9"

    implementation 'com.jakewharton:butterknife:10.2.3'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'


    implementation 'com.squareup.retrofit2:retrofit:2.7.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.1'

//    implementation 'com.fast.frame:xFastFrame:1.0.3'
}


def getSelfDefinedVersion(type) {
    int code = Integer.parseInt(new Date().format("yyMMddHHmm"))
    int name = Integer.parseInt(new Date().format("MMddHH"))
    String versionName = "1.0.1"
    if ("code".equals(type)) {
        return 1
    } else if ("title".equals(type)) {
        return versionName
    }
}
